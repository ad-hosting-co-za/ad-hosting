# Development Guidelines and Rules

## Project Structure and Dependencies
- Use Vite + React instead of Next.js for this project
- Keep all client-side components marked with 'use client' directive
- Use React Router for navigation instead of Next.js navigation
- Maintain proper TypeScript types and interfaces

## Styling and UI
- Use Tailwind CSS with proper font configuration
- Configure fonts in tailwind.config.js before using in CSS
- Follow the established color scheme and design system
- Ensure responsive design for all components

## Component Development
- Keep components modular and reusable
- Implement proper error handling and loading states
- Use proper TypeScript types for all props and state
- Follow accessibility guidelines (ARIA, semantic HTML)

## State Management
- Use React Context for global state when needed
- Implement proper form validation with Zod
- Handle authentication state securely
- Use proper error boundaries

## Performance
- Implement lazy loading for images and components
- Use proper code splitting
- Optimize bundle size
- Implement proper caching strategies

## Code Quality
- Follow consistent naming conventions
- Write clean, maintainable code
- Include proper comments and documentation
- Implement proper error handling

## Testing
- Write unit tests for critical components
- Implement integration tests for key features
- Test error scenarios and edge cases
- Maintain good test coverage

## Security
- Implement proper authentication flows
- Sanitize user inputs
- Use secure HTTP headers
- Follow security best practices

## Accessibility
- Maintain WCAG compliance
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Test with screen readers

## Development Workflow
- Keep development environment functional
- Maintain proper error logging
- Follow consistent git workflow
- Document breaking changes

## Specific Rules
1. Never use Next.js specific imports (use React Router instead)
2. Always configure fonts in tailwind.config.js before using
3. Keep all client components marked with 'use client'
4. Implement proper error boundaries
5. Follow the established color scheme
6. Maintain responsive design
7. Keep components modular and reusable
8. Implement proper loading states
9. Use TypeScript for all new code
10. Follow accessibility guidelines

## Error Prevention
- Check for proper imports
- Validate component props
- Ensure proper state management
- Test edge cases
- Handle loading and error states
- Validate form inputs
- Check for memory leaks
- Ensure proper cleanup in useEffect
- Validate API responses
- Handle network errors

## Development Environment
- Keep development server running
- Monitor for build errors
- Check for TypeScript errors
- Validate CSS
- Test responsive design
- Check accessibility
- Monitor performance
- Validate SEO
- Test cross-browser compatibility
- Check mobile responsiveness 